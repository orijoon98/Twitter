[{"/Users/orijoon98/Desktop/GitHub/Twitter/src/index.js":"1","/Users/orijoon98/Desktop/GitHub/Twitter/src/components/App.js":"2","/Users/orijoon98/Desktop/GitHub/Twitter/src/components/Router.js":"3","/Users/orijoon98/Desktop/GitHub/Twitter/src/routes/Auth.js":"4","/Users/orijoon98/Desktop/GitHub/Twitter/src/routes/Home.js":"5","/Users/orijoon98/Desktop/GitHub/Twitter/src/fbase.js":"6","/Users/orijoon98/Desktop/GitHub/Twitter/src/components/Navigation.js":"7","/Users/orijoon98/Desktop/GitHub/Twitter/src/routes/Profile.js":"8","/Users/orijoon98/Desktop/GitHub/Twitter/src/components/Tweet.js":"9","/Users/orijoon98/Desktop/GitHub/Twitter/src/components/TweetFactory.js":"10","/Users/orijoon98/Desktop/GitHub/Twitter/src/components/AuthForm.js":"11"},{"size":228,"mtime":1617804988780,"results":"12","hashOfConfig":"13"},{"size":963,"mtime":1617802058183,"results":"14","hashOfConfig":"13"},{"size":1465,"mtime":1617804957708,"results":"15","hashOfConfig":"13"},{"size":1278,"mtime":1617805231005,"results":"16","hashOfConfig":"13"},{"size":879,"mtime":1617805262451,"results":"17","hashOfConfig":"13"},{"size":669,"mtime":1617702499276,"results":"18","hashOfConfig":"13"},{"size":1352,"mtime":1617803561333,"results":"19","hashOfConfig":"13"},{"size":1411,"mtime":1617805462910,"results":"20","hashOfConfig":"13"},{"size":2481,"mtime":1617804131773,"results":"21","hashOfConfig":"13"},{"size":2864,"mtime":1617804817677,"results":"22","hashOfConfig":"13"},{"size":1802,"mtime":1617803166763,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u3q8r3",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/orijoon98/Desktop/GitHub/Twitter/src/index.js",[],"/Users/orijoon98/Desktop/GitHub/Twitter/src/components/App.js",[],"/Users/orijoon98/Desktop/GitHub/Twitter/src/components/Router.js",[],"/Users/orijoon98/Desktop/GitHub/Twitter/src/routes/Auth.js",[],"/Users/orijoon98/Desktop/GitHub/Twitter/src/routes/Home.js",[],"/Users/orijoon98/Desktop/GitHub/Twitter/src/fbase.js",[],["50","51"],"/Users/orijoon98/Desktop/GitHub/Twitter/src/components/Navigation.js",[],"/Users/orijoon98/Desktop/GitHub/Twitter/src/routes/Profile.js",["52"],"import { authService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default ({ refreshUser, userObj }) => {\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    };\n    const onChange = (event) => {\n        const {target:{value}} = event;\n        setNewDisplayName(value);\n    };\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName){\n            await userObj.updateProfile({\n                displayName: newDisplayName\n            });\n            refreshUser();\n        }\n    };\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n                <input onChange={onChange} type=\"text\" autoFocus placeholder=\"Display name\" value={newDisplayName} className=\"formInput\" />\n                <input \n                    type=\"submit\" \n                    value=\"Update Profile\" \n                    className=\"formBtn\"\n                    style={{\n                        marginTop: 10\n                    }}\n                />\n            </form>\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>Log Out</span>\n        </div>\n    )\n};","/Users/orijoon98/Desktop/GitHub/Twitter/src/components/Tweet.js",["53"],"import React, { useState } from \"react\";\nimport { dbService, storageService } from \"fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Tweet = ({ tweetObj, isOwner }) => {\n    const [editing, setEditing] = useState(false);\n    const [newTweet, setNewTweet] = useState(tweetObj.text);\n    const onDeleteClick = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete this tweet?\");\n        if(ok){\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\n            await storageService.refFromURL(tweetObj.attachmentUrl).delete();\n        }\n    };\n    const toggleEditing = () => setEditing((prev) => !prev);\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        await dbService.doc(`tweets/${tweetObj.id}`).update({\n            text:newTweet\n        });\n        setEditing(false);\n    };\n    const onChange = (event) => {\n        const {target:{value}} = event;\n        setNewTweet(value);\n    };\n    return(\n        <div className=\"tweet\">\n            {editing ? (\n                <>\n                    {isOwner && (\n                        <>\n                            <form onSubmit={onSubmit} className=\"container tweetEdit\">\n                            <input type=\"text\" placeholder=\"Edit your tweet\" value={newTweet} required autofocus onChange={onChange} className=\"formInput\" />\n                            <input type=\"submit\" value=\"Update Tweet\" className=\"formBtn\" />\n                            </form>\n                            <span onClick={toggleEditing} className=\"formBtn cancelBtn\">Cancel</span>    \n                        </>\n                    )}\n                </>\n            ) : (\n                <>\n                    <h4>{tweetObj.text}</h4>\n                    {tweetObj.attachmentUrl && <img src={tweetObj.attachmentUrl} />}\n                    {isOwner && (\n                        <div class=\"tweet__actions\">\n                            <span onClick={onDeleteClick}>\n                                <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                            <span onClick={toggleEditing}>\n                                <FontAwesomeIcon icon={faPencilAlt} />\n                            </span>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    )\n};\n\nexport default Tweet;","/Users/orijoon98/Desktop/GitHub/Twitter/src/components/TweetFactory.js",["54"],"import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { dbService, storageService } from \"fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst TweetFactory = ({ userObj }) => {\n    const [tweet, setTweet] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\");\n    const onSubmit = async (event) => {\n        if(tweet === \"\"){\n            return;\n        }\n        event.preventDefault();\n        let attachmentUrl = \"\";\n        if(attachment !== \"\"){\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n            const response = await attachmentRef.putString(attachment, \"data_url\");\n            attachmentUrl = await response.ref.getDownloadURL();\n        };\n        const tweetObj = {\n            text: tweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl\n        };\n        await dbService.collection(\"tweets\").add(tweetObj);\n        setTweet(\"\");\n        setAttachment(\"\");\n    };\n    const onChange = (event) => {\n        const {target:{value}} = event;\n        setTweet(value);\n    };\n    const onFileChange = (event) => {\n        const {\n            target: { files },\n        } = event;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => {\n            const {currentTarget: { result }} = finishedEvent;\n            setAttachment(result);\n        };\n        reader.readAsDataURL(theFile);\n    };\n    const onClearAttachment = () => setAttachment(\"\");\n    return(\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n                <input classname=\"factoryInput__input\" value ={tweet} onChange={onChange} type=\"text\" placeholder=\"What's on your mind?\" maxlength={120} />\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n            </div>\n            <label for=\"attach-file\" className=\"factoryInput__label\">\n                <span>Add photos</span>\n                <FontAwesomeIcon icon={faPlus} />\n            </label>    \n            <input id=\"attach-file\" type=\"file\" accept=\"image/*\" onChange={onFileChange} style={{opacity: 0}} />\n                {attachment && (\n                    <div className=\"factoryForm__attachment\">\n                        <img src={attachment} style={{backgroundImage: attachment}} />\n                        <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n                            <span>Remove</span>\n                            <FontAwesomeIcon icon={faTimes} />\n                        </div>\n                    </div>\n                )}\n        </form>\n    );\n};\n\nexport default TweetFactory;","/Users/orijoon98/Desktop/GitHub/Twitter/src/components/AuthForm.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":5,"column":1,"nodeType":"61","endLine":41,"endColumn":3},{"ruleId":"62","severity":1,"message":"63","line":45,"column":48,"nodeType":"64","endLine":45,"endColumn":84},{"ruleId":"62","severity":1,"message":"63","line":61,"column":25,"nodeType":"64","endLine":61,"endColumn":87},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]